@using System.Globalization
@using Microsoft.AspNetCore.Components.Web
@using Codeer.LowCode.Bindings.MudBlazor.Internal

@if (StandardInput) {
  <MudTextField T="string" @bind-Value:get="@GetStandardValue()!" @bind-Value:set="@RaiseOnStandardValueChanged"
                InputId="@InputId" Disabled="@Disabled" ReadOnly="ReadOnly" InputType="InputType.Time"
                Variant="Variant" Error="Error" ErrorText="@(ErrorText)" @attributes="AdditionalAttributes"/>
} else {
  <MudTimePicker @bind-Time:get="@GetValue()" @bind-Time:set="@RaiseOnValueChanged"
                 Disabled="@Disabled" ReadOnly="ReadOnly" Variant="Variant" Color="Color" Error="Error" ErrorText="@(ErrorText)"
                 @attributes="AdditionalAttributes"/>
}

@code {
  private const string Format = "HH:mm:ss";

  [Parameter]
  public bool StandardInput { get; set; }

  [Parameter]
  public string InputId { get; set; } = string.Empty;

  [Parameter]
  public bool Disabled { get; set; }

  [Parameter]
  public bool ReadOnly { get; set; }

  [Parameter]
  public Variant Variant { get; set; }

  [Parameter]
  public Color Color { get; set; } = Color.Primary;

  [Parameter]
  public bool Error { get; set; }

  [Parameter]
  public string? ErrorText { get; set; }

  [Parameter]
  public TimeOnly? Value { get; set; }

  [Parameter]
  public bool AssumeLocal { get; set; }

  [Parameter]
  public EventCallback<TimeOnly?> ValueChanged { get; set; }

  [Parameter(CaptureUnmatchedValues = true)]
  public Dictionary<string, object> AdditionalAttributes { get; set; } = [];

  private TimeSpan? GetValue() => (AssumeLocal ? Value : DateTimeHelper.ToLocalTime(Value))?.ToTimeSpan();

  private string? GetStandardValue() {
    if (Value is null) return null;
    var dateTime = new DateTime(new DateOnly(2000, 1, 1), Value.Value, AssumeLocal ? DateTimeKind.Local : DateTimeKind.Utc);
    return (AssumeLocal ? dateTime : dateTime.ToLocalTime()).ToString(Format);
  }

  private async Task RaiseOnValueChanged(TimeSpan? value) {
    await RaiseCallback(DateTimeHelper.ToTimeOnly(value));
  }

  private async Task RaiseOnStandardValueChanged(string? value) {
    if (string.IsNullOrEmpty(value)) {
      await ValueChanged.InvokeAsync(null);
      return;
    }
    if (DateTime.TryParseExact(value, Format, CultureInfo.CurrentCulture, DateTimeStyles.AssumeLocal, out var date)) {
      await RaiseCallback(DateTimeHelper.ToTimeOnly(date.TimeOfDay));
    }
  }

  private Task RaiseCallback(TimeOnly? timeOnly) =>
    ValueChanged.InvokeAsync(AssumeLocal ? timeOnly : DateTimeHelper.ToUniversalTime(timeOnly));

}