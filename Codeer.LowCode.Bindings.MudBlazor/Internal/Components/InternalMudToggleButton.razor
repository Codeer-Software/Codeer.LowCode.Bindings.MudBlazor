@using global::MudBlazor.Utilities

<div>
  <MudToggleGroup T="int?" SelectionMode="SelectionMode.ToggleSelection" @bind-Value:get="@RawValue" @bind-Value:set="OnChange"
                  Disabled="Disabled" Color="@(Error ? Color.Error : Color)" CheckMark Class="d-inline-grid" TextClass="px-2">
    <MudToggleItem Value="@((int?)1)">@Label</MudToggleItem>
  </MudToggleGroup>
  @if (Error && !string.IsNullOrWhiteSpace(ErrorText)) {
    <div class="mud-input-control-helper-container">
      <div class="d-flex mud-input-helper-text mud-input-error">
        <div class="me-auto">@ErrorText</div>
      </div>
    </div>
  }
</div>

@code {

  private int? RawValue => Value ? 1 : null;

  [Parameter]
  public string? Label { get; set; }

  [Parameter]
  public bool Value { get; set; }

  [Parameter]
  public bool Disabled { get; set; }

  [Parameter]
  public Color Color { get; set; } = Color.Primary;

  [Parameter]
  public bool Error { get; set; }

  [Parameter]
  public string? ErrorText { get; set; }

  [Parameter]
  public EventCallback<bool> ValueChanged { get; set; }

  private async Task OnChange(int? isChecked) {
    Value = isChecked == 1;
    await ValueChanged.InvokeAsync(Value);
  }

}