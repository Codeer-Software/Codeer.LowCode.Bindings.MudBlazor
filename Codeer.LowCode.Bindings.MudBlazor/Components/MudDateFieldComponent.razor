@using System.Globalization
@using Codeer.LowCode.Bindings.MudBlazor.Internal
@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Bindings.MudBlazor.Internal.Components
@inherits MudFieldComponentBase<DateField, MudDateFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@GetViewOnlyValue()</span>
} else {
  <InternalMudDatePicker @bind-Value:get="@GetValue()" @bind-Value:set="@RaiseOnValueChanged" InputId="@WebElementId"
                         Disabled="@IsDisabled" ReadOnly="IsViewMode" Variant="MudDesign.Variant" Color="MudDesign.Color"
                         Error="!Field.IsValid" ErrorText="@(Field.ErrorText)" StandardInput="MudDesign.StandardInput"/>
}

@code {

  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;

  private DateOnly? GetValue() => Field.Value;

  private async Task RaiseOnValueChanged(DateOnly? value) {
    await Field.SetValueAsync(value);
  }

  private string GetViewOnlyValue() {
    var value = Field.Services.AppInfoService.IsDesignMode ? new DateOnly(2024, 5, 13) : Field.Value;
    try {
      return value?.ToString(Field.Design.Format) ?? string.Empty;
    }
    catch (FormatException) {
      return value?.ToString() ?? string.Empty;
    }
  }

}