@using Codeer.LowCode.Blazor.Repository.Design
@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Bindings.MudBlazor.Internal.Components
@inherits MudFieldComponentBase<BooleanField, MudBooleanFieldDesign>

@if (Field.ModuleLayoutType == ModuleLayoutType.List && Field.IsViewOnly) {
  <span class="d-block py-2">
    @ViewOnlyValue
  </span>
} else {
  if (Field.Design.UIType == BooleanUIType.CheckBox) {
    <MudCheckBox @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label"
                 Color="MudDesign.Color" Error="!Field.IsValid" ErrorText="@(Field.ErrorText)"/>
  } else if (Field.Design.UIType == BooleanUIType.Switch) {
    <MudSwitch @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label"
               Color="MudDesign.Color" Error="!Field.IsValid" ErrorText="@(Field.ErrorText)"/>
  } else if (Field.Design.UIType == BooleanUIType.ToggleButton) {
    <InternalMudToggleButton @bind-Value:get="@IsChecked" @bind-Value:set="@OnChange" Disabled="@(IsDisabled || IsViewMode)" Label="@Label"
                             Color="MudDesign.Color" Error="!Field.IsValid" ErrorText="@(Field.ErrorText)"/>
  }
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private bool IsChecked => Field.Value == true;
  private string Label => Field.Design.Text;
  private object? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Boolean" : Field.Value;

  private async Task OnChange(bool isChecked) {
    await Field.SetValueAsync(isChecked);
  }

}