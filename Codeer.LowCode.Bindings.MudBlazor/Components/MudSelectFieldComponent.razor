@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Blazor.Repository.Design
@inherits MudFieldComponentBase<SelectField, MudSelectFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@(ViewOnlyValue)</span>
} else {
  <MudSelect T="string" @bind-Value:get="SelectedValue" @bind-Value:set="@OnChange" InputId="@WebElementId" Disabled="@IsDisabled" OnOpen="@OnFocus"
             Variant="MudDesign.Variant" Error="!Field.IsValid">
    @if (Field.Design.EmptyCandidateType != SelectEmptyCandidateType.NotExist) {
      <MudSelectItem Value="@("")" />
    }
    @foreach (var item in ItemsSource) {
      <MudSelectItem Value="@item.Value">@item.Key</MudSelectItem>
    }
  </MudSelect>
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;
  private string SelectedValue => Field.Value ?? string.Empty;
  private Dictionary<string, string> ItemsSource => Field.DisplayTextAndValue;
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Select" : Field.DisplayText;

  private async Task OnChange(string? value) {
    if (string.IsNullOrEmpty(value)) {
      value = Field.Design.EmptyCandidateType == SelectEmptyCandidateType.StringEmpty ? string.Empty : null;
    }

    await Field.SetValueAsync(value);
  }

  private async Task OnFocus() {
    await Field.OnFocusAsync();
  }

}