@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Blazor.Repository.Design
@using Microsoft.AspNetCore.Components.Web
@inherits MudFieldComponentBase<SelectField, MudSelectFieldDesign>

@if (IsViewMode) {
  <span class="d-block py-2">@(ViewOnlyValue)</span>
} else {
  <MudSelect T="string" @bind-Value:get="SelectedValue" @bind-Value:set="@OnChange" InputId="@WebElementId" Disabled="@IsDisabled" OnOpen="@OnFocus"
             Variant="MudDesign.Variant" Error="!Field.IsValid" ErrorText="@(Field.ErrorText)">
    @if (Field.Design.EmptyCandidateType != SelectEmptyCandidateType.NotExist) {
      <MudSelectItem Value="@("")" />
    }
    @foreach (var item in ItemsSource) {
      <MudSelectItem Value="@item.Value">@item.Key</MudSelectItem>
    }
  </MudSelect>
}

@code {
  private bool IsDisabled => Field.IsEnabled == false;
  private bool IsViewMode => Field.IsViewOnly;

  private string? _bugFixValue;
  private string? SelectedValue
  {
    get
    {
      if (_bugFixValue != null)
      {
        //一度不具合回避用の文字列を返す
        var ret = _bugFixValue;
        _bugFixValue = null;
        StateHasChanged();
        return ret;
      }
      return Field.Value;
    }
  }

  private Dictionary<string, string> ItemsSource => Field.DisplayTextAndValue;
  private string? ViewOnlyValue => Field.Services.AppInfoService.IsDesignMode ? "Select" : Field.DisplayText;

  private async Task OnChange(string? value)
  {
    if (string.IsNullOrEmpty(value))
    {
      value = Field.Design.EmptyCandidateType == SelectEmptyCandidateType.StringEmpty ? string.Empty : null;
    }
    await Field.SetValueAsync(value);
  }

  private async Task OnFocus()
  {
    //ここで候補を変えた後、選択文字列が消えてしまう
    //そのため一瞬候補外の文字列を設定して再度正しい値を設定するという手法を使う
    if (await Field.OnFocusAsync()) _bugFixValue = Guid.NewGuid().ToString();
  }
}