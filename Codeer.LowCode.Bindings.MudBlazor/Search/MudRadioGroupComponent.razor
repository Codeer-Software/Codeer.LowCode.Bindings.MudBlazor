@using Codeer.LowCode.Blazor.OperatingModel
@using Microsoft.AspNetCore.Components.Web;
@using Codeer.LowCode.Blazor.RequestInterfaces
@using Codeer.LowCode.Bindings.MudBlazor.Internal.Components
@inherits MudFieldComponentBase<RadioGroupField, MudRadioGroupFieldDesign>
@inject Services Services

<div class="root">
  <div class="input-group">
    @if (Field.Design.AllowOrSearch) {
      <MudSelect @bind-SelectedValues:get="SelectedValues" @bind-SelectedValues:set="@OnChangeItems" MultiSelection="true"
                 Variant="MudDesign.Variant">
        @foreach (var item in ItemsSource) {
          <MudSelectItem Value="@item.Value">@item.Key</MudSelectItem>
        }
      </MudSelect>
    } else {
      <MudSelect T="string" @bind-Value:get="@SelectedValue" @bind-Value:set="@OnChange" Variant="MudDesign.Variant">
        <MudSelectItem Value="@("")"></MudSelectItem>
        @foreach (var item in ItemsSource) {
          <MudSelectItem Value="@item.Value">@item.Key</MudSelectItem>
        }
      </MudSelect>
    }
  </div>
  <div>
    <InternalMudToggleButton Label="Not" @bind-Value:get="@Field.IsInverted" @bind-Value:set="@OnChangeFlag"/>
  </div>
</div>

@code {
  private string SelectedValue => Field.SearchValue ?? string.Empty;
  private IEnumerable<string> SelectedValues => Field.SearchValues.Where(s => s is not null).ToList()!;
  private Dictionary<string, string> ItemsSource => GetItemsSource();

  private Dictionary<string, string> GetItemsSource() {
    if (Services.AppInfoService.IsDesignMode) {
      return new() { { "Item1", "Value1" }, { "Item2", "Value2" } };
    }

    return Field.DisplayTextAndValue;
  }

  private async Task OnChange(string? value) {
    if (string.IsNullOrEmpty(value)) value = null;
    await Field.SetSearchValueAsync(value);
  }

  private async Task OnChangeItems(IEnumerable<string> obj) {
    await Field.SetSearchValuesAsync(obj);
  }

  private async Task OnChangeFlag(bool isChecked) {
    await Field.SetNotFlag(isChecked);
  }

}