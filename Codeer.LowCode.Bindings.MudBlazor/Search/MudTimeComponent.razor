@using Codeer.LowCode.Bindings.MudBlazor.Internal
@using Codeer.LowCode.Blazor.OperatingModel
@using Codeer.LowCode.Blazor.Utils
@inherits FieldComponentBase<TimeField>

<div class="d-flex align-items-center">
  <MudTimePicker @bind-Time:get="@MoreThanValue" @bind-Time:set="@OnMoreThanChanged"
                 data-search-target="min"/>
  <span>ï½ž</span>
  <MudTimePicker @bind-Time:get="@LessThanValue" @bind-Time:set="@OnLessThanChanged"
                 data-search-target="max"/>
</div>

@code {

  private TimeSpan? LessThanValue => (Field.Design.SaveAsUtc ? DateTimeHelper.ToLocalTime(Field.SearchMax) : Field.SearchMax)?.ToTimeSpan();
  private TimeSpan? MoreThanValue => (Field.Design.SaveAsUtc ? DateTimeHelper.ToLocalTime(Field.SearchMin) : Field.SearchMin)?.ToTimeSpan();

  private TimeOnly? ParseTime(TimeSpan? value) {
    var timeOnly = DateTimeHelper.ToTimeOnly(value);
    return Field.Design.SaveAsUtc ? DateTimeHelper.ToUniversalTime(timeOnly) : timeOnly;
  }

  private async Task OnMoreThanChanged(TimeSpan? value) {
    await Field.SetSearchMinAsync(ParseTime(value));
  }

  private async Task OnLessThanChanged(TimeSpan? value) {
    await Field.SetSearchMaxAsync(ParseTime(value));
  }

}